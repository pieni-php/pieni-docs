pieniはインストール直後に単純なページの表示をする

systemと同階層にapplicationディレクトリがあれば、そちらを優先して参照する。
また、それはsystem内とファイル構造を同じくするべきである。
つまり、applicationディレクトリを置くことで、system各ファイル単位の上書きが可能になる。

【デモ】
examples/mvc
内容ファイルは
./controllers/welcome_controller.js
./controllers/.htaccess
./config.php
./views/welcome/index.php
./models/welcome_model.php

まず、「system/examples/mvc」をapplicationとしてコピーする。

cp -r ./system/examples/mvc application

ブラウザ画面が
system/views/welcome/index.php
から
application/views/welcome/index.php
に上書きされている。

config.phpでは、各設定を記述できる。
現在は
system/config.php
から
application/config.php
に上書きされている。

config.phpでは
「packages」によって、パッケージの管理を記述している。
パッケージ名を配列として渡すことで、fallback先の指定ができる。
最初のパッケージで見つからないファイルは、次のパッケージを探しに行く。

config.phpでは
「pdo」によって、DBの設定を記述している。
持つ情報は「dsn, username, password」である。
dsnにはデータソース名、usernmaeにはDBアクセスするユーザー名、passwordにはDBアクセスに必要なパスワードを記述する。

config.phpでは
「debug」によって、デバッグ表示の切替ができる。
持つ情報は「true, false」である。
オンならtrue、オフならfalseを記述する。

config.phpでは
「languages」によって、言語の記述ができる。
任意の文字列を配列として渡す。空の配列は指定できない。
0番の要素は、URIセグメントでは省略される。

config.phpでは
「actors」によって、アクターの記述ができる。
任意の文字列を配列として渡す。空の配列は指定できない。
0番の要素は、URIセグメントでは省略される。

config.phpでは
「actions」によって、要求可能な動作を記述している。
情報はそれぞれ「type, actor, target, action, argc」の階層を持つ。
これらは、URIセグメントに対応している。

typeは「page」と「api」がある。
ページリクエストは「page」に
APIリクエストは「api」に
記述される。
「page」はURIセグメントでは省略される。

actorは「actors」で記述したアクターから選んで記述する。

targetは任意の文字列で記述できる。
「welcome」はURIセグメントでは省略される。

actionは任意の文字列で記述できる。
「index」はURIセグメントでは省略される。

argcはURIセグメントの「type, actor, target, action」以降のセグメント数を記述する。


example/mvcをコピーした時点では、
applicationが呼ばれる
application/config.phpが読み込まれる
URIセグメントに記述がないので、「type, actor, target, action」が省略され、それぞれ「pgae, g, welcome, index」が要求される
また、argcは0となる